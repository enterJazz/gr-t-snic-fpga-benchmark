#ifndef TEST_UTILS_HPP
#define TEST_UTILS_HPP


#include <string>
#include <stdint.h>

namespace test_utils
{
    // test params
    const uint8_t msg_hash[] {0x3f, 0xc9, 0xb6, 0x89, 0x45, 0x9d, 0x73, 0x8f,
                             0x8c, 0x88, 0xa3, 0xa4, 0x8a, 0xa9, 0xe3, 0x35,
                             0x42, 0x01, 0x6b, 0x7a, 0x40, 0x52, 0xe0, 0x01,
                             0xaa, 0x53, 0x6f, 0xca, 0x74, 0x81, 0x3c, 0xb0};

    // pub and priv key pair used by kernels
    const uint8_t pubkey[] {
        0x10, 0xb8, 0x24, 0xdd, 0xef, 0x4a, 0xd3, 0xc0,
        0xe1, 0x2b, 0xd0, 0x54, 0xee, 0xd5, 0x53, 0x9b,
        0x26, 0xc1, 0xce, 0xb6, 0x5c, 0x7a, 0xb7, 0x7b,
        0x27, 0x6f, 0xb5, 0xc7, 0x15, 0x20, 0xb,  0xdd
    };

    const uint8_t privkey[] {
        0x8a, 0x6a, 0x2f, 0xdd, 0x0,  0xbe, 0x41, 0x24,
        0xc6, 0x28, 0x82, 0xfe, 0xb0, 0x1b, 0x6,  0xdf,
        0x8e, 0x3,  0x3f, 0xb3, 0x47, 0x16, 0x1c, 0xa3,
        0x65, 0x6c, 0xb1, 0x75, 0xb4, 0x77, 0x91, 0x88,
        0x10, 0xb8, 0x24, 0xdd, 0xef, 0x4a, 0xd3, 0xc0,
        0xe1, 0x2b, 0xd0, 0x54, 0xee, 0xd5, 0x53, 0x9b,
        0x26, 0xc1, 0xce, 0xb6, 0x5c, 0x7a, 0xb7, 0x7b,
        0x27, 0x6f, 0xb5, 0xc7, 0x15, 0x20, 0xb,  0xdd
    };

    // expected signature of private key pair in test utils
    const uint8_t expected_signature[] {
        0xff, 0x89, 0xd3, 0x6e, 0x3,  0xcd, 0xe8, 0x41,
        0x8,  0x87, 0x31, 0x7a, 0xa9, 0x6d, 0x69, 0x2,
        0xa7, 0x59, 0x81, 0x1,  0x39, 0x4,  0x4,  0xf2,
        0xe,  0xc7, 0x52, 0xb6, 0xe0, 0x8f, 0x4f, 0xed,
        0xc4, 0x22, 0x5f, 0xbc, 0xc6, 0x35, 0xc,  0x15,
        0xb5, 0x6e, 0xb7, 0xdf, 0xc4, 0xee, 0xa4, 0xe5,
        0x10, 0xa2, 0x1d, 0x11, 0x49, 0xfa, 0x65, 0x10,
        0x3f, 0x86, 0xfd, 0x5c, 0x40, 0x9c, 0xea, 0xb
    };


    // kernel path env vars
    const std::string kernel_asym_attest_path_env_var { "KERNEL_ASYM_ATTEST_XCLBIN" };
    const std::string kernel_asym_verify_path_env_var { "KERNEL_ASYM_VERIFY_XCLBIN" };
    const std::string kernel_sym_attest_path_env_var { "KERNEL_SYM_ATTEST_XCLBIN" };
    const std::string kernel_sym_verify_path_env_var { "KERNEL_SYM_VERIFY_XCLBIN" };

    // xrt spec vars
    const std::string xcl_emulation_mode_env_var { "XCL_EMULATION_MODE" };
    const std::string xcl_sw_emu_mode { "sw_emu" };

    const uint8_t number_execs { 1 };

    std::string get_env_var( std::string const & key );

    std::string uint8_t_array_to_hex_string(const uint8_t* data, size_t size);
}

#endif
